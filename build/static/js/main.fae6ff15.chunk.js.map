{"version":3,"sources":["Chat.js","Head.js","App.js","reportWebVitals.js","index.js"],"names":["myId","uuidv4","socket","io","on","console","log","id","Chat","useState","userName","setUserName","name","changeInput","updateName","message","updateMessage","messages","updateMessages","online","setOnline","useEffect","handleNewMessage","newMessage","off","handleOnline","newOnline","inputType","functionType","e","target","value","valueType","className","map","m","index","onSubmit","preventDefault","emit","trim","onChange","placeholder","type","onClick","disconnect","window","location","reload","Head","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAIMA,EAAOC,cAEPC,EAASC,YAAG,yBAClBD,EAAOE,GAAG,WAAW,kBAAMC,QAAQC,IAAIJ,EAAOK,OAG9C,IAuFeC,EAvFF,WACX,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA2BF,mBAAS,CAAC,CAACF,GAAIP,EAAMY,KAAM,GAAIC,aAAa,KAAvE,mBAAOD,EAAP,KAAaE,EAAb,KACA,EAAiCL,mBAAS,IAA1C,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAmCP,mBAAS,IAA5C,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAA4BT,mBAAS,IAArC,mBAAOU,EAAP,KAAeC,EAAf,KAIAC,qBAAU,WACR,IAAMC,EAAmB,SAAAC,GAAU,OAAIL,EAAe,GAAD,mBAAKD,GAAL,CAAeM,MAEpE,OADArB,EAAOE,GAAG,eAAgBkB,GACnB,kBAAMpB,EAAOsB,IAAI,eAAgBF,MACxC,CAACL,IAEHI,qBAAU,WACR,IAAMI,EAAe,SAAAC,GAAS,OAAIN,EAAU,GAAD,mBAAKD,GAAL,CAAaO,MAExD,OADAxB,EAAOE,GAAG,cAAeqB,GAClB,kBAAMvB,EAAOsB,IAAI,cAAeC,MACvC,CAACN,IAIH,IAyBIQ,EAAY,OACZC,EALe,SAAAC,GACjBlB,EAAYkB,EAAEC,OAAOC,QAKnBC,EAAYtB,EAgBhB,OAZ2B,IAAxBE,EAAK,GAAGC,cACTc,EAAY,UACZC,EAfwB,SAAAC,GACxBb,EAAca,EAAEC,OAAOC,QAevBC,EAAYjB,GAEdV,QAAQC,IAAIa,GAQZ,uBAAMc,UAAU,YAAhB,UACE,oBAAIA,UAAU,OAAd,SACIhB,EAASiB,KAAI,SAACC,EAAEC,GAAH,OACf,oBAAIH,UAAS,iCAA4BE,EAAE5B,KAAOP,EAAO,OAAS,SAAlE,SACE,sBAAMiC,UAAS,2BAAsBE,EAAE5B,KAAOP,EAAO,OAAS,SAA9D,mBACMmC,EAAEvB,KADR,aACiBuB,EAAEpB,YAF6DqB,QAOpF,sBAAKH,UAAU,SAAf,UACA,sBAAMA,UAAU,OAAOI,SAvDA,SAAAR,GACvBA,EAAES,kBACyB,IAAxB1B,EAAK,GAAGC,aAETC,EAAW,CAAC,CAACP,GAAIP,EAAMY,KAAMF,EAAWG,aAAa,KAErDX,EAAOqC,KAAK,cAAe,CAACrC,EAAOK,GAAIG,KAEpCK,EAAQyB,SACTtC,EAAOqC,KAAK,eAAgB,CAAChC,GAAIP,EAAMe,UAASH,KAAMF,IAEtDM,EAAc,MA4ClB,SACA,uBAAOiB,UAAU,cAAcQ,SAAUb,EAAcc,YAAW,mBAAcf,GAAagB,KAAK,OAAOZ,MAAOC,MAEhH,wBAAQY,QArBV,WACE1C,EAAOqC,KAAK,eAAgB,CAAChC,GAAIP,EAAMe,QAASL,EAAW,yBAA2BE,KAAM,aAC5FV,EAAO2C,aACPC,OAAOC,SAASC,UAkBhB,+B,MCzFW,SAASC,IACtB,OACE,qBAAKhB,UAAU,YAAf,SACE,4CCMSiB,MARf,WACC,OACC,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKWkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fae6ff15.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n// CSS block and element and modifiers\nimport io from \"socket.io-client\"\nimport { v4 as uuidv4 } from 'uuid'; \nconst myId = uuidv4(); // globally unique identifier (GUID)\n\nconst socket = io(\"http://localhost:8080\")\nsocket.on('connect', () => console.log(socket.id))\n\n\nconst Chat = () => {\n  const [userName, setUserName] = useState('')\n  const [name, updateName] = useState([{id: myId, name: \"\", changeInput: false}])\n  const [message, updateMessage] = useState('')\n  const [messages, updateMessages] = useState([])\n  const [online, setOnline] = useState([])\n\n\n\n  useEffect(()=> {\n    const handleNewMessage = newMessage => updateMessages([...messages, newMessage]) // two params\n    socket.on('chat.message', handleNewMessage)\n    return () => socket.off('chat.message', handleNewMessage)\n  },[messages])\n\n  useEffect(()=> {\n    const handleOnline = newOnline => setOnline([...online, newOnline]) // two params, for this hook too\n    socket.on('online.user', handleOnline)\n    return () => socket.off('online.user', handleOnline)\n  },[online])\n  \n\n\n  const handleFormSubmit = e => {\n    e.preventDefault()\n    if(name[0].changeInput === false){ \n     // updates the user name\n      updateName([{id: myId, name: userName,  changeInput: true}])\n      // the bellow creates an array of online users\n      socket.emit('online.user', [socket.id, userName])\n    }else{\n      if(message.trim()){ \n        socket.emit('chat.message', {id: myId, message, name: userName})\n  \n        updateMessage('')\n        // if there is any message inside the input box it cleans it, like the shopping list\n      }\n    }\n\n   \n  }\n  const handleInputChange = e => {\n    updateMessage(e.target.value)\n  }\n  const handleName = e => {\n    setUserName(e.target.value)\n    \n  }\n  let inputType = \"name\"\n  let functionType = handleName\n  let valueType = userName\n\n  \n  // this condition changes the input from name to message after its name is typed\n  if(name[0].changeInput === true){\n    inputType = \"message\"\n    functionType = handleInputChange\n    valueType = message\n  }\n  console.log(online)\n  function handleDesconnect(){\n    socket.emit('chat.message', {id: myId, message: userName + \" has left this room...\" , name: \"ChatsUpp\"})\n    socket.disconnect()\n    window.location.reload();\n\n  }\n  return (\n  <main className=\"container\">\n    <ul className=\"list\">\n      { messages.map((m,index) => \n      <li className={`list__item list__item--${m.id === myId ? 'mine' : 'other'}`} key={index}> \n        <span className={`message message--${m.id === myId ? 'mine' : 'other'}`} >\n          {`${m.name}: ${m.message}`}\n        </span>\n      </li>  \n      ) }\n    </ul>\n    <div className=\"footer\">\n    <form className=\"form\" onSubmit={handleFormSubmit}>\n    <input className=\"form__field\" onChange={functionType} placeholder={`Type new ${inputType}`} type=\"text\" value={valueType}/>\n    </form>\n    <button onClick={handleDesconnect}>Leave Chat</button> \n    </div>\n  </main>\n    \n  )\n}\nexport default Chat\n// p key={users.id}>{users.name}</p>","import './Head.css';\n\nexport default function Head(){\n  return (\n    <div className=\"white fas\">\n      <h1>ChatsUpp</h1>\n    </div>\n  )\n}","import React from 'react'\nimport Chat from './Chat'\nimport Head from './Head'\nfunction App(){\n return(\n  <div className=\"App\">\n    <Head />\n    <Chat />\n  </div>\n )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}